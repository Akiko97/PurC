<!DOCTYPE hvml SYSTEM "f: PY">
<hvml target="html">
    <head>
        <title>Embedded Python: Animated 3D Random Walk</title>

        <update on="$TIMERS" to="unite">
            [
                { "id" : "clock", "interval" : 100, "active" : "yes" },
            ]
        </update>
    </head>

    <body>
        <h1>Animated 3D Random Walk</h1>

        <init as 'pyCode'>
'''
import numpy as np
import matplotlib.pyplot as plt

# Fixing random state for reproducibility
np.random.seed(19680801)

def random_walk(num_steps, max_step=0.05):
    """Return a 3D random walk as (num_steps, 3) array."""
    start_pos = np.random.random(3)
    steps = np.random.uniform(-max_step, max_step, size=(num_steps, 3))
    walk = start_pos + np.cumsum(steps, axis=0)
    return walk

def update_lines(num, walks, lines):
    for line, walk in zip(lines, walks):
        # NOTE: there is no .set_data() for 3 dim data...
        line.set_data(walk[:num, :2].T)
        line.set_3d_properties(walk[:num, 2])

# Data: 40 random walks as (num_steps, 3) arrays
num_steps = 30
walks = [random_walk(num_steps) for index in range(40)]

# Attaching 3D axis to the figure
fig = plt.figure()
ax = fig.add_subplot(projection="3d")

# Create lines initially without data
lines = [ax.plot([], [], [])[0] for _ in walks]

# Setting the axes properties
ax.set(xlim3d=(0, 1), xlabel='X')
ax.set(ylim3d=(0, 1), ylabel='Y')
ax.set(zlim3d=(0, 1), zlabel='Z')
'''
        </init>

        <choose on {{ $PY.run($pyCode, 'source') }} >
            <catch for `InternalFailure`>
                <p>A Python exception raised: $PY.except</p>
            </catch>
        </choose>

        <div id='myNS' >
            <img id="theFigure" width="638" height="476" />

            <init as 'step' at '#myNS' with 0L />
            <observe on $TIMERS for "expired:clock">
                <inherit>
                    {{
                            $STREAM.stdout.writelines("Going to handle Frame {$step}...");
                            $PY.global.update_lines()($step, $PY.global.walks, $PY.global.lines);
                            $PY.global.fig.canvas.draw_idle();
                            $PY.global.fig.savefig("frame-{$step}.svg");
                            $STREAM.stdout.writelines("File frame-{$step}.svg generated")
                    }}
                </inherit>

                <update on '#theFigure' at 'attr.href' with "file://$SYS.cwd/frame-{$step}.svg" />
                <init as 'step' at '#myNS' with $DATA.arith('+', $step, 1) />
                <test with $L.gt($step, 30) >
                    <exit with "Ok" />
                </test>
            </observe>
        </div>

        <observe on $CRTN for "rdrState:closed">
            <exit with "closed" />
        </observe>

    </body>
</hvml>

