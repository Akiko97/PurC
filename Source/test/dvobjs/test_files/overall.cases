# test cases for $STR.contains
# TODO: more cases for case-insensitive.
negative:
    $STR.contains
    ArgumentMissed

negative:
    $STR.contains(false)
    ArgumentMissed

negative:
    $STR.contains('', false)
    WrongDataType

positive:
    $STR.contains("hello world", "hello ")
    true

positive:
    $STR.contains("hello world", "Hello ")
    false

positive:
    $STR.contains("hello world", "Hello ", false)
    false

positive:
    $STR.contains("hello world", "Hello ", true)
    true

positive:
    $STR.contains("HVML是全球首个可编程标记语言", "hvml", true)
    true

positive:
    $STR.contains("HVML是全球首个可编程标记语言", "HVML", true)
    true

positive:
    $STR.contains("ＨＶＭＬ是全球首个可编程标记语言", "Hvml")
    false

positive:
    $STR.contains("ＨＶＭＬ是全球首个可编程标记语言", "ｈｖｍ", true)
    true

positive:
    $STR.contains("HVML是全球首个可编程标记语言", "全球")
    true

# test cases for $STR.starts_with
# TODO: more cases for case-insensitive.
negative:
    $STR.starts_with
    ArgumentMissed

negative:
    $STR.starts_with(false)
    ArgumentMissed

negative:
    $STR.starts_with('', false)
    WrongDataType

positive:
    $STR.starts_with("hello world", "hello ")
    true

positive:
    $STR.starts_with("hello world", "hello world")
    true

positive:
    $STR.starts_with("hello world", "hello world ")
    false

positive:
    $STR.starts_with("hello world", "Hello ")
    false

positive:
    $STR.starts_with("hello world", "")
    true

positive:
    $STR.starts_with("hello world", "Hello ", false)
    false

positive:
    $STR.starts_with("hello world", "Hello ", true)
    true

positive:
    $STR.starts_with("HVML是全球首个可编程标记语言", "hvml", true)
    true

positive:
    $STR.starts_with("HVML是全球首个可编程标记语言", "HVML", true)
    true

positive:
    $STR.starts_with("ＨＶＭＬ是全球首个可编程标记语言", "ｈｖｍ", true)
    true

positive:
    $STR.starts_with("HVML是全球首个可编程标记语言", "Hvml")
    false

# test cases for $STR.ends_with
# TODO: more cases for case-insensitive.
negative:
    $STR.ends_with
    ArgumentMissed

negative:
    $STR.ends_with(false)
    ArgumentMissed

negative:
    $STR.ends_with('', false)
    WrongDataType

positive:
    $STR.ends_with("hello world", "world")
    true

positive:
    $STR.ends_with("hello world", "Hello ")
    false

positive:
    $STR.ends_with("hello world", "world  ")
    false

positive:
    $STR.ends_with("hello world", "hello world")
    true

positive:
    $STR.ends_with("hello world", "hello world ")
    false

positive:
    $STR.ends_with("hello world", "")
    true

positive:
    $STR.ends_with("HVML是全球首个可编程标记语言", "语言")
    true

positive:
    $STR.ends_with("全球首个可编程标记语言ＨＶＭＬ", "ｈｖｍｌ")
    false

positive:
    $STR.ends_with("全球首个可编程标记语言ＨＶＭＬ", "ｈｖｍｌ", true)
    true

positive:
    $STR.ends_with("HVML是全球首个可编程标记语言", "全球")
    false

# test cases for $STR.tolower
# TODO: more cases for some special languages
negative:
    $STR.tolower
    ArgumentMissed

negative:
    $STR.tolower(false)
    WrongDataType

positive:
    $STR.tolower('')
    ''

positive:
    $STR.tolower("HVML! ")
    "hvml! "

positive:
    $STR.tolower("ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ")
    "ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ"

positive:
    $STR.tolower("中华民族万岁！")
    "中华民族万岁！"

# test cases for $STR.toupper
# TODO: more cases for some special languages
negative:
    $STR.toupper
    ArgumentMissed

negative:
    $STR.toupper(false)
    WrongDataType

positive:
    $STR.toupper('')
    ''

positive:
    $STR.toupper("hvml! ")
    "HVML! "

positive:
    $STR.toupper("ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ")
    "ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ"

positive:
    $STR.toupper("中华民族万岁！")
    "中华民族万岁！"

# test cases for $STR.join
positive:
    $STR.join
    ""

positive:
    $STR.join("hello ", "world")
    "hello world"

positive:
    $STR.join(1, ':', 2, ':', 3)
    "1:2:3"

positive:
    $STR.join("HVML", "是", "全球", "首个", "可编程", "标记语言")
    "HVML是全球首个可编程标记语言"

# test cases for $STR.reverse
negative:
    $STR.reverse
    ArgumentMissed

negative:
    $STR.reverse(false)
    WrongDataType

positive:
    $STR.reverse("")
    ""

positive:
    $STR.reverse("1")
    "1"

positive:
    $STR.reverse("中")
    "中"

positive:
    $STR.reverse("123456")
    "654321"

positive:
    $STR.reverse("HVML是全球首个可编程标记语言")
    "言语记标程编可个首球全是LMVH"

# test cases for $STR.repeat
negative:
    $STR.repeat
    ArgumentMissed

negative:
    $STR.repeat(false)
    ArgumentMissed

negative:
    $STR.repeat('', false)
    WrongDataType

negative:
    $STR.repeat('', -1)
    InvalidValue

positive:
    $STR.repeat("JavaScript", 0)
    ""

positive:
    $STR.repeat("HVML! ", 3)
    "HVML! HVML! HVML! "

positive:
    $STR.repeat("中华民族万岁！", 10)
    "中华民族万岁！中华民族万岁！中华民族万岁！中华民族万岁！中华民族万岁！中华民族万岁！中华民族万岁！中华民族万岁！中华民族万岁！中华民族万岁！"

# test cases for $STR.nr_bytes
negative:
    $STR.nr_bytes
    ArgumentMissed

negative:
    $STR.nr_bytes(false)
    WrongDataType

positive:
    $STR.nr_bytes('')
    1UL

positive:
    $STR.nr_bytes("JavaScript")
    11UL

positive:
    $STR.nr_bytes( bb )
    0UL

positive:
    $STR.nr_bytes( bx08 )
    1UL

# test cases for $EJSON.fetchreal with quantity specified
negative:
    $EJSON.fetchreal(bx12345678, 'i16:10')
    InvalidValue

negative:
    $EJSON.fetchreal(bx12345678, 'i16:-3')
    InvalidValue

negative:
    $EJSON.fetchreal(bx12345678, 'i16:3')
    InvalidValue

negative:
    $EJSON.fetchreal(bx12345678, 'asdf:')
    InvalidValue

negative:
    $EJSON.fetchreal(bx12345678, ':sadf')
    InvalidValue

positive:
    $EJSON.fetchreal(bx00000000, 'i16:0')
    0L

positive:
    $EJSON.fetchreal(bx00020004, 'i16be')
    2L

positive:
    $EJSON.fetchreal(bx00020004, ' i16be:1 ', 2)
    4L

positive:
    $EJSON.fetchreal(bx00020004, ' i16be:2 ')
    [2L, 4L]

# test cases for $EJSON.crc32
negative:
    $EJSON.crc32
    ArgumentMissed

negative:
    $EJSON.crc32('HVML', 'unknown')
    InvalidValue

positive:
    $EJSON.crc32('HVML', null, 'ulongint')
    761839935UL

# define `ulongint`
positive:
    $EJSON.crc32('HVML', null, 'asdfklasfd')
    761839935UL

positive:
    $EJSON.crc32('HVML', 'CRC-32', 'ulongint')
    761839935UL

positive:
    $EJSON.crc32('HVML', 'CRC-32/BZIP2', 'ulongint')
    583601153UL

positive:
    $EJSON.crc32('HVML', 'CRC-32/MPEG-2', 'ulongint')
    3711366142UL

positive:
    $EJSON.crc32('HVML', 'CRC-32/POSIX', 'ulongint')
    3855470970UL

positive:
    $EJSON.crc32('HVML', 'CRC-32/XFER', 'ulongint')
    2600375422UL

positive:
    $EJSON.fetchreal($EJSON.crc32('HVML', 'CRC-32/MPEG-2', 'binary'), 'u32')
    3711366142UL

# ENDIAN-dependent
positive:
    $EJSON.crc32('HVML')
    761839935UL

positive:
    $EJSON.crc32('HVML', null, 'binary')
    bx3FC1682D

# ENDIAN-dependent
positive:
    $EJSON.crc32('HVML', null, 'lowercase')
    '3fc1682d'

# ENDIAN-dependent
positive:
    $EJSON.crc32('HVML', null, 'uppercase')
    '3FC1682D'

# ENDIAN-dependent
positive:
    $EJSON.crc32('HVML', 'CRC-32/POSIX')
    3855470970UL

# ENDIAN-dependent
positive:
    $EJSON.crc32('HVML', 'CRC-32/POSIX', 'uppercase')
    '7AD1CDE5'

positive:
    $EJSON.crc32('HVML', 'CRC-32/ISCSI', 'ulongint')
    1088443129UL

positive:
    $EJSON.crc32('HVML', 'CRC-32C', 'ulongint')
    1088443129UL

positive:
    $EJSON.crc32('HVML', 'CRC-32/BASE91-D', 'ulongint')
    3051174686UL

positive:
    $EJSON.crc32('HVML', 'CRC-32D', 'ulongint')
    3051174686UL

positive:
    $EJSON.crc32('HVML', 'CRC-32/JAMCRC', 'ulongint')
    3533127360UL

positive:
    $EJSON.crc32('HVML', 'CRC-32/AIXM', 'ulongint')
    355205254UL

positive:
    $EJSON.crc32('HVML', 'CRC-32Q', 'ulongint')
    355205254UL

# test cases for $EJSON.md5
negative:
    $EJSON.md5
    ArgumentMissed

positive:
    $EJSON.md5('HVML')
    bxb2565228770ec540692d8a0cfcd3a990

positive:
    $EJSON.md5('HVML', 'binary')
    bxb2565228770ec540692d8a0cfcd3a990

positive:
    $EJSON.md5('HVML', 'lowercase')
    'b2565228770ec540692d8a0cfcd3a990'

positive:
    $EJSON.md5('HVML', 'uppercase')
    'B2565228770EC540692D8A0CFCD3A990'

# test cases for $EJSON.sha1
negative:
    $EJSON.sha1
    ArgumentMissed

positive:
    $EJSON.sha1('HVML')
    bxda03f74dd36a33cf908ad0ae743510772d120983

positive:
    $EJSON.sha1('HVML', 'binary')
    bxda03f74dd36a33cf908ad0ae743510772d120983

positive:
    $EJSON.sha1('HVML', 'lowercase')
    'da03f74dd36a33cf908ad0ae743510772d120983'

positive:
    $EJSON.sha1('HVML', 'uppercase')
    'DA03F74DD36A33CF908AD0AE743510772D120983'

# test cases for $EJSON.bin2hex
negative:
    $EJSON.bin2hex
    ArgumentMissed

negative:
    $EJSON.bin2hex(null)
    WrongDataType

negative:
    $EJSON.bin2hex('HVML', 'dasf')
    InvalidValue

positive:
    $EJSON.bin2hex('HVML')
    '48564d4c'

positive:
    $EJSON.bin2hex('HVML', 'lowercase')
    '48564d4c'

positive:
    $EJSON.bin2hex('HVML', 'uppercase')
    '48564D4C'

# test cases for $EJSON.hex2bin
negative:
    $EJSON.hex2bin
    ArgumentMissed

negative:
    $EJSON.hex2bin(null)
    WrongDataType

negative:
    $EJSON.hex2bin('asdaf')
    BadEncoding

positive:
    $EJSON.hex2bin('0FF')
    bb0000.1111

positive:
    $EJSON.hex2bin('0FF0')
    bx0ff0

positive:
    $EJSON.hex2bin('48564d4c')
    bx48564d4c

# test cases for $EJSON.base64_encode
negative:
    $EJSON.base64_encode
    ArgumentMissed

negative:
    $EJSON.base64_encode(false)
    WrongDataType

positive:
    $EJSON.base64_encode('HVML')
    'SFZNTA=='

positive:
    $EJSON.base64_encode(bx48564d4c)
    'SFZNTA=='

positive:
    $EJSON.base64_encode('HVML 是全球首款可编程标记语言')
    'SFZNTCDmmK/lhajnkIPpppbmrL7lj6/nvJbnqIvmoIforrDor63oqIA='

# test cases for $EJSON.base64_decode
negative:
    $EJSON.base64_decode
    ArgumentMissed

negative:
    $EJSON.base64_decode(false)
    WrongDataType

positive:
    $EJSON.base64_decode('SFZNTA==')
    bx48564d4c

positive:
    $EJSON.fetchstr($EJSON.base64_decode('SFZNTCDmmK/lhajnkIPpppbmrL7lj6/nvJbnqIvmoIforrDor63oqIA='), 'utf8')
    'HVML 是全球首款可编程标记语言'

# test cases for $EJSON.pack
negative:
    $EJSON.pack
    ArgumentMissed

negative:
    $EJSON.pack("")
    ArgumentMissed

negative:
    $EJSON.pack("", true)
    InvalidValue

negative:
    $EJSON.pack("utf8", true)
    WrongDataType

positive:
    $EJSON.pack( "i16le i32le", 10, 10)
    bx0a000a000000

positive:
    $EJSON.pack( "i16le:2 i32le", [[10, 15], 255])
    bx0A000F00FF000000

positive:
    $EJSON.pack( "i16le:2 i32le", [10, 15], 255)
    bx0A000F00FF000000

# test cases for $EJSON.unpack
negative:
    $EJSON.unpack
    ArgumentMissed
    []

negative:
    $EJSON.unpack("")
    ArgumentMissed
    []

negative:
    $EJSON.unpack("", bx00FF)
    InvalidValue
    []

negative:
    $EJSON.unpack(false, false)
    WrongDataType
    []

negative:
    $EJSON.unpack("utf8", false)
    WrongDataType
    []

positive:
    $EJSON.unpack("utf8", $EJSON.base64_decode('SFZNTCDmmK/lhajnkIPpppbmrL7lj6/nvJbnqIvmoIforrDor63oqIA='))
    'HVML 是全球首款可编程标记语言'

positive:
    $EJSON.unpack("i16le i32le", bx0a000a000000)
    [10L, 10L]

positive:
    $EJSON.unpack("i16le:2 i32le", bx0A000F00FF000000)
    [[10L, 15L], 255L]

positive:
    $EJSON.unpack("i16le:2 i32le", $EJSON.pack("i16le:2 i32le", [[10, 15], 255]))
    [[10L, 15L], 255L]

positive:
    $EJSON.unpack("i16le", bx0a000a000000)
    10L

# test cases for $EJSON.arith
negative:
    $EJSON.arith
    ArgumentMissed
    undefined

negative:
    $EJSON.arith('5', 6)
    ArgumentMissed
    undefined

negative:
    $EJSON.arith(5, 6, 8)
    WrongDataType
    undefined

negative:
    $EJSON.arith('090', 5, 3)
    InvalidValue
    undefined

negative:
    $EJSON.arith('/', "5", 0)
    InvalidValue
    undefined

negative:
    $EJSON.arith('%', "5", 0)
    InvalidValue
    undefined

negative:
    $EJSON.arith('^', "5", -1)
    InvalidValue
    undefined

negative:
    $EJSON.arith('^', [], -1)
    WrongDataType
    undefined

positive:
    $EJSON.arith('+', "5", 0)
    5L

positive:
    $EJSON.arith('-', "abc", 3)
    -3L

positive:
    $EJSON.arith('-', "3", 4)
    -1L

positive:
    $EJSON.arith('/', 80, 4)
    20L

positive:
    $EJSON.arith('%', 5, 3)
    2L

positive:
    $EJSON.arith('^', 3, 0)
    1L

positive:
    $EJSON.arith('^', -3, 2)
    9L

# test cases for $EJSON.bitwise
negative:
    $EJSON.bitwise
    ArgumentMissed
    undefined

negative:
    $EJSON.bitwise('~')
    ArgumentMissed
    undefined

negative:
    $EJSON.bitwise('&', 0)
    ArgumentMissed
    undefined

negative:
    $EJSON.bitwise('|', 0)
    ArgumentMissed
    undefined

negative:
    $EJSON.bitwise('^', 0)
    ArgumentMissed
    undefined

negative:
    $EJSON.bitwise('<', 0)
    ArgumentMissed
    undefined

negative:
    $EJSON.bitwise('>', 0)
    ArgumentMissed
    undefined

negative:
    $EJSON.bitwise('/', "5", 0)
    InvalidValue
    undefined

negative:
    $EJSON.bitwise('~', [])
    WrongDataType
    undefined

negative:
    $EJSON.bitwise('^', "5", {})
    WrongDataType
    undefined

positive:
    $EJSON.bitwise('&', 15, 0)
    0UL

positive:
    $EJSON.bitwise('|', 15, 0)
    15UL

positive:
    $EJSON.bitwise('~', -1UL)
    0UL

positive:
    $EJSON.bitwise('^', 0, -1UL)
    -1UL

positive:
    $EJSON.bitwise('<', 1, 3)
    8UL

positive:
    $EJSON.bitwise('>', 16, 4)
    1UL

positive:
    $EJSON.bitwise('<', 1, 200)
    256UL

positive:
    $EJSON.bitwise('>', 16, 200)
    0UL

# test cases for $URL.encode
negative:
    $URL.encode
    ArgumentMissed
    ''

negative:
    $URL.encode(false)
    WrongDataType
    ''

negative:
    $URL.encode(bx00FF, false)
    WrongDataType
    ''

negative:
    $URL.encode(bx00FF, 'asfdasfd')
    InvalidValue
    ''

positive:
    $URL.encode('')
    ''

positive:
    $URL.encode('HVML: 是全球首款可编程标记语言-_.')
    'HVML%3A+%E6%98%AF%E5%85%A8%E7%90%83%E9%A6%96%E6%AC%BE%E5%8F%AF%E7%BC%96%E7%A8%8B%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80-_.'

positive:
    $URL.encode('HVML: 是全球首款可编程标记语言-_.', 'rfc1738')
    'HVML%3A+%E6%98%AF%E5%85%A8%E7%90%83%E9%A6%96%E6%AC%BE%E5%8F%AF%E7%BC%96%E7%A8%8B%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80-_.'

positive:
    $URL.encode('HVML: 是全球首款可编程标记语言-_.', 'rfc3986')
    'HVML%3A%20%E6%98%AF%E5%85%A8%E7%90%83%E9%A6%96%E6%AC%BE%E5%8F%AF%E7%BC%96%E7%A8%8B%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80-_.'

# test cases for $URL.decode
negative:
    $URL.decode
    ArgumentMissed
    ''

negative:
    $URL.decode(false)
    WrongDataType
    ''

negative:
    $URL.decode(bx00FF, false)
    WrongDataType
    ''

negative:
    $URL.decode('', 'asfdasfd')
    InvalidValue
    ''

negative:
    $URL.decode('', 'string', 'asdfasdf')
    InvalidValue
    ''

positive:
    $URL.decode('+', 'string', 'rfc3986')
    ''

positive:
    $URL.decode('')
    ''

positive:
    $URL.decode('HVML%3A+%E6%98%AF%E5%85%A8%E7%90%83%E9%A6%96%E6%AC%BE%E5%8F%AF%E7%BC%96%E7%A8%8B%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80-_.', 'string')
    'HVML: 是全球首款可编程标记语言-_.'

positive:
    $URL.decode('HVML%3A+%E6%98%AF%E5%85%A8%E7%90%83%E9%A6%96%E6%AC%BE%E5%8F%AF%E7%BC%96%E7%A8%8B%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80-_.', 'string', 'rfc1738')
    'HVML: 是全球首款可编程标记语言-_.'

positive:
    $URL.decode('HVML%3A+%E6%98%AF%E5%85%A8%E7%90%83%E9%A6%96%E6%AC%BE%E5%8F%AF%E7%BC%96%E7%A8%8B%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80-_.', 'string', 'rfc3986')
    'HVML:'

positive:
    $URL.decode('%E6%98%AF%E5%85%A8%E7%90%83%E9%A6%96%E6%AC%BE%E5%8F%AF%E7%BC%96%E7%A8%8B%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80', 'binary')
    bxE698AFE585A8E79083E9A696E6ACBEE58FAFE7BC96E7A88BE6A087E8AEB0E8AFADE8A880

positive:
    $URL.decode('HVML%3A+-_.', 'binary', 'rfc1738')
    bx48564d4c3A202d5f2e

positive:
    $URL.decode('HVML:+-_.', 'binary', 'rfc1738')
    bx48564d4c

positive:
    $URL.decode('HVML+-_.', 'binary', 'rfc3986')
    bx48564d4c

